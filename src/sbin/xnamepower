#!/bin/bash
# Â© 2023. Triad National Security, LLC. All rights reserved.
# This program was produced under U.S. Government contract 89233218CNA000001 for Los Alamos
# National Laboratory (LANL), which is operated by Triad National Security, LLC for the U.S.
# Department of Energy/National Nuclear Security Administration. All rights in the program are
# reserved by Triad National Security, LLC, and the U.S. Department of Energy/National Nuclear
# Security Administration. The Government is granted for itself and others acting on its behalf a
# nonexclusive, paid-up, irrevocable worldwide license in this material to reproduce, prepare
# derivative works, distribute copies to the public, perform publicly and display publicly, and to permit
# others to do so.

#
# xnamepower
# Control and query power of Mountain xnames via CAPMC
#
# Usage: xnamepower xname1,xname2,...,xnameN command
# where command is
# on - power on
# off - power off
# reset - power off/on
# status - power status
#

usage() {
  echo "xnamepower xname1,xname2,...,xnameN [on|off|reset|status]" 1>&2
}

prompt() {
  [[ $yes == 1 ]] && return 0
  x="$1"
  o="$2"
  echo -n "Really perform \"$o\" on $x? [y/N] "
  read reply
  case "$reply" in
  Y*|y*)
    return 0
    ;;
  esac
  return -1
}

yes=0
forcearg=""
recursearg=""

while [ -n "$1" ]; do
  case "$1" in
  -y)
    yes=1
    ;;
  -f)
    forcearg="--force true"
    ;;
  -r)
    recursearg="--recursive true"
    ;;
  x*)
    xlist="$1"
    ;;
  on|off|reset|status)
    op="$1"
    ;;
  *)
    xlist=`nid2xname $1 | xargs | sed 's/ /,/g'`
    ;;
  esac
  shift
done
continuearg="--continue true"

[ -z "$xlist" ] && { usage; exit 1; }

ret1=0
ret2=0
case "$op" in
on)
  prompt $xlist on && cray capmc xname_on create $recursearg $continuearg --xnames "$xlist"
  ret1=$?
  ;;
off)
  prompt $xlist off && cray capmc xname_off create $recursearg $continuearg $forcearg --xnames "$xlist"
  ret1=$?
  ;;
reset)
  prompt $xlist reset
  if [ $? -eq 0 ]; then
    cray capmc xname_off create $recursearg $forcearg $continuearg --xnames "$xlist"
    ret1=$?
    echo -n "Waiting 10 seconds ..."
    sleep 10
    cray capmc xname_on create $recursearg --xnames "$xlist"
    ret2=$?
  fi
  ;;
status|"")
  [ -n "$recursearg" ] && echo "NOTICE: recursive arg not supported by get_xname_status. Ignoring." 1>&2
  [ -n "$forcearg" ] && echo "NOTICE: force arg not supported by get_xname_status. Ignoring." 1>&2
  cray capmc get_xname_status create --xnames "$xlist"
  ret1=$?
  ;;
*)
  usage
  exit 1
  ;;
esac

exit $((ret1|ret2))
